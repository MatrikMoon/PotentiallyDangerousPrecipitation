/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: packets.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./models";
import * as pb_1 from "google-protobuf";
export class Command extends pb_1.Message {
    #one_of_decls: number[][] = [[1]];
    constructor(data?: any[] | ({} & (({
        do_action_command?: Command.DoActionCommand;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("do_action_command" in data && data.do_action_command != undefined) {
                this.do_action_command = data.do_action_command;
            }
        }
    }
    get do_action_command() {
        return pb_1.Message.getWrapperField(this, Command.DoActionCommand, 1) as Command.DoActionCommand;
    }
    set do_action_command(value: Command.DoActionCommand) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_do_action_command() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get command() {
        const cases: {
            [index: number]: "none" | "do_action_command";
        } = {
            0: "none",
            1: "do_action_command"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    static fromObject(data: {
        do_action_command?: ReturnType<typeof Command.DoActionCommand.prototype.toObject>;
    }): Command {
        const message = new Command({});
        if (data.do_action_command != null) {
            message.do_action_command = Command.DoActionCommand.fromObject(data.do_action_command);
        }
        return message;
    }
    toObject() {
        const data: {
            do_action_command?: ReturnType<typeof Command.DoActionCommand.prototype.toObject>;
        } = {};
        if (this.do_action_command != null) {
            data.do_action_command = this.do_action_command.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_do_action_command)
            writer.writeMessage(1, this.do_action_command, () => this.do_action_command.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.do_action_command, () => message.do_action_command = Command.DoActionCommand.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Command {
        return Command.deserialize(bytes);
    }
}
export namespace Command {
    export class DoActionCommand extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            action?: dependency_1.Action;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
            }
        }
        get action() {
            return pb_1.Message.getWrapperField(this, dependency_1.Action, 1) as dependency_1.Action;
        }
        set action(value: dependency_1.Action) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_action() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            action?: ReturnType<typeof dependency_1.Action.prototype.toObject>;
        }): DoActionCommand {
            const message = new DoActionCommand({});
            if (data.action != null) {
                message.action = dependency_1.Action.fromObject(data.action);
            }
            return message;
        }
        toObject() {
            const data: {
                action?: ReturnType<typeof dependency_1.Action.prototype.toObject>;
            } = {};
            if (this.action != null) {
                data.action = this.action.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_action)
                writer.writeMessage(1, this.action, () => this.action.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DoActionCommand {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DoActionCommand();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.action, () => message.action = dependency_1.Action.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DoActionCommand {
            return DoActionCommand.deserialize(bytes);
        }
    }
}
export class Connect extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        password?: string;
    }): Connect {
        const message = new Connect({});
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            password?: string;
        } = {};
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.password.length)
            writer.writeString(1, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connect {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Connect();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Connect {
        return Connect.deserialize(bytes);
    }
}
export class Response extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: Response.ResponseType;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, Response.ResponseType.Fail) as Response.ResponseType;
    }
    set type(value: Response.ResponseType) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: Response.ResponseType;
        message?: string;
    }): Response {
        const message = new Response({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: Response.ResponseType;
            message?: string;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != Response.ResponseType.Fail)
            writer.writeEnum(1, this.type);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Response {
        return Response.deserialize(bytes);
    }
}
export namespace Response {
    export enum ResponseType {
        Fail = 0,
        Success = 1
    }
}
export class ConnectResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        response?: Response;
        self?: dependency_1.User;
        state?: dependency_1.State;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
            if ("self" in data && data.self != undefined) {
                this.self = data.self;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
        }
    }
    get response() {
        return pb_1.Message.getWrapperField(this, Response, 1) as Response;
    }
    set response(value: Response) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_response() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get self() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 2) as dependency_1.User;
    }
    set self(value: dependency_1.User) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_self() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get state() {
        return pb_1.Message.getWrapperField(this, dependency_1.State, 3) as dependency_1.State;
    }
    set state(value: dependency_1.State) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_state() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        response?: ReturnType<typeof Response.prototype.toObject>;
        self?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        state?: ReturnType<typeof dependency_1.State.prototype.toObject>;
    }): ConnectResponse {
        const message = new ConnectResponse({});
        if (data.response != null) {
            message.response = Response.fromObject(data.response);
        }
        if (data.self != null) {
            message.self = dependency_1.User.fromObject(data.self);
        }
        if (data.state != null) {
            message.state = dependency_1.State.fromObject(data.state);
        }
        return message;
    }
    toObject() {
        const data: {
            response?: ReturnType<typeof Response.prototype.toObject>;
            self?: ReturnType<typeof dependency_1.User.prototype.toObject>;
            state?: ReturnType<typeof dependency_1.State.prototype.toObject>;
        } = {};
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        if (this.self != null) {
            data.self = this.self.toObject();
        }
        if (this.state != null) {
            data.state = this.state.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_response)
            writer.writeMessage(1, this.response, () => this.response.serialize(writer));
        if (this.has_self)
            writer.writeMessage(2, this.self, () => this.self.serialize(writer));
        if (this.has_state)
            writer.writeMessage(3, this.state, () => this.state.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConnectResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.response, () => message.response = Response.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.self, () => message.self = dependency_1.User.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.state, () => message.state = dependency_1.State.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ConnectResponse {
        return ConnectResponse.deserialize(bytes);
    }
}
export class Event extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6]];
    constructor(data?: any[] | ({} & (({
        player_added_event?: Event.PlayerAddedEvent;
        player_updated_event?: never;
        player_left_event?: never;
        toggle_updated_event?: never;
        artifact_added_event?: never;
        artifact_updated_event?: never;
    } | {
        player_added_event?: never;
        player_updated_event?: Event.PlayerUpdatedEvent;
        player_left_event?: never;
        toggle_updated_event?: never;
        artifact_added_event?: never;
        artifact_updated_event?: never;
    } | {
        player_added_event?: never;
        player_updated_event?: never;
        player_left_event?: Event.PlayerLeftEvent;
        toggle_updated_event?: never;
        artifact_added_event?: never;
        artifact_updated_event?: never;
    } | {
        player_added_event?: never;
        player_updated_event?: never;
        player_left_event?: never;
        toggle_updated_event?: Event.ToggleUpdatedEvent;
        artifact_added_event?: never;
        artifact_updated_event?: never;
    } | {
        player_added_event?: never;
        player_updated_event?: never;
        player_left_event?: never;
        toggle_updated_event?: never;
        artifact_added_event?: Event.ArtifactAddedEvent;
        artifact_updated_event?: never;
    } | {
        player_added_event?: never;
        player_updated_event?: never;
        player_left_event?: never;
        toggle_updated_event?: never;
        artifact_added_event?: never;
        artifact_updated_event?: Event.ArtifactUpdatedEvent;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player_added_event" in data && data.player_added_event != undefined) {
                this.player_added_event = data.player_added_event;
            }
            if ("player_updated_event" in data && data.player_updated_event != undefined) {
                this.player_updated_event = data.player_updated_event;
            }
            if ("player_left_event" in data && data.player_left_event != undefined) {
                this.player_left_event = data.player_left_event;
            }
            if ("toggle_updated_event" in data && data.toggle_updated_event != undefined) {
                this.toggle_updated_event = data.toggle_updated_event;
            }
            if ("artifact_added_event" in data && data.artifact_added_event != undefined) {
                this.artifact_added_event = data.artifact_added_event;
            }
            if ("artifact_updated_event" in data && data.artifact_updated_event != undefined) {
                this.artifact_updated_event = data.artifact_updated_event;
            }
        }
    }
    get player_added_event() {
        return pb_1.Message.getWrapperField(this, Event.PlayerAddedEvent, 1) as Event.PlayerAddedEvent;
    }
    set player_added_event(value: Event.PlayerAddedEvent) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_player_added_event() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get player_updated_event() {
        return pb_1.Message.getWrapperField(this, Event.PlayerUpdatedEvent, 2) as Event.PlayerUpdatedEvent;
    }
    set player_updated_event(value: Event.PlayerUpdatedEvent) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_player_updated_event() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get player_left_event() {
        return pb_1.Message.getWrapperField(this, Event.PlayerLeftEvent, 3) as Event.PlayerLeftEvent;
    }
    set player_left_event(value: Event.PlayerLeftEvent) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_player_left_event() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get toggle_updated_event() {
        return pb_1.Message.getWrapperField(this, Event.ToggleUpdatedEvent, 4) as Event.ToggleUpdatedEvent;
    }
    set toggle_updated_event(value: Event.ToggleUpdatedEvent) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_toggle_updated_event() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get artifact_added_event() {
        return pb_1.Message.getWrapperField(this, Event.ArtifactAddedEvent, 5) as Event.ArtifactAddedEvent;
    }
    set artifact_added_event(value: Event.ArtifactAddedEvent) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_artifact_added_event() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get artifact_updated_event() {
        return pb_1.Message.getWrapperField(this, Event.ArtifactUpdatedEvent, 6) as Event.ArtifactUpdatedEvent;
    }
    set artifact_updated_event(value: Event.ArtifactUpdatedEvent) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_artifact_updated_event() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get event() {
        const cases: {
            [index: number]: "none" | "player_added_event" | "player_updated_event" | "player_left_event" | "toggle_updated_event" | "artifact_added_event" | "artifact_updated_event";
        } = {
            0: "none",
            1: "player_added_event",
            2: "player_updated_event",
            3: "player_left_event",
            4: "toggle_updated_event",
            5: "artifact_added_event",
            6: "artifact_updated_event"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6])];
    }
    static fromObject(data: {
        player_added_event?: ReturnType<typeof Event.PlayerAddedEvent.prototype.toObject>;
        player_updated_event?: ReturnType<typeof Event.PlayerUpdatedEvent.prototype.toObject>;
        player_left_event?: ReturnType<typeof Event.PlayerLeftEvent.prototype.toObject>;
        toggle_updated_event?: ReturnType<typeof Event.ToggleUpdatedEvent.prototype.toObject>;
        artifact_added_event?: ReturnType<typeof Event.ArtifactAddedEvent.prototype.toObject>;
        artifact_updated_event?: ReturnType<typeof Event.ArtifactUpdatedEvent.prototype.toObject>;
    }): Event {
        const message = new Event({});
        if (data.player_added_event != null) {
            message.player_added_event = Event.PlayerAddedEvent.fromObject(data.player_added_event);
        }
        if (data.player_updated_event != null) {
            message.player_updated_event = Event.PlayerUpdatedEvent.fromObject(data.player_updated_event);
        }
        if (data.player_left_event != null) {
            message.player_left_event = Event.PlayerLeftEvent.fromObject(data.player_left_event);
        }
        if (data.toggle_updated_event != null) {
            message.toggle_updated_event = Event.ToggleUpdatedEvent.fromObject(data.toggle_updated_event);
        }
        if (data.artifact_added_event != null) {
            message.artifact_added_event = Event.ArtifactAddedEvent.fromObject(data.artifact_added_event);
        }
        if (data.artifact_updated_event != null) {
            message.artifact_updated_event = Event.ArtifactUpdatedEvent.fromObject(data.artifact_updated_event);
        }
        return message;
    }
    toObject() {
        const data: {
            player_added_event?: ReturnType<typeof Event.PlayerAddedEvent.prototype.toObject>;
            player_updated_event?: ReturnType<typeof Event.PlayerUpdatedEvent.prototype.toObject>;
            player_left_event?: ReturnType<typeof Event.PlayerLeftEvent.prototype.toObject>;
            toggle_updated_event?: ReturnType<typeof Event.ToggleUpdatedEvent.prototype.toObject>;
            artifact_added_event?: ReturnType<typeof Event.ArtifactAddedEvent.prototype.toObject>;
            artifact_updated_event?: ReturnType<typeof Event.ArtifactUpdatedEvent.prototype.toObject>;
        } = {};
        if (this.player_added_event != null) {
            data.player_added_event = this.player_added_event.toObject();
        }
        if (this.player_updated_event != null) {
            data.player_updated_event = this.player_updated_event.toObject();
        }
        if (this.player_left_event != null) {
            data.player_left_event = this.player_left_event.toObject();
        }
        if (this.toggle_updated_event != null) {
            data.toggle_updated_event = this.toggle_updated_event.toObject();
        }
        if (this.artifact_added_event != null) {
            data.artifact_added_event = this.artifact_added_event.toObject();
        }
        if (this.artifact_updated_event != null) {
            data.artifact_updated_event = this.artifact_updated_event.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_player_added_event)
            writer.writeMessage(1, this.player_added_event, () => this.player_added_event.serialize(writer));
        if (this.has_player_updated_event)
            writer.writeMessage(2, this.player_updated_event, () => this.player_updated_event.serialize(writer));
        if (this.has_player_left_event)
            writer.writeMessage(3, this.player_left_event, () => this.player_left_event.serialize(writer));
        if (this.has_toggle_updated_event)
            writer.writeMessage(4, this.toggle_updated_event, () => this.toggle_updated_event.serialize(writer));
        if (this.has_artifact_added_event)
            writer.writeMessage(5, this.artifact_added_event, () => this.artifact_added_event.serialize(writer));
        if (this.has_artifact_updated_event)
            writer.writeMessage(6, this.artifact_updated_event, () => this.artifact_updated_event.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.player_added_event, () => message.player_added_event = Event.PlayerAddedEvent.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.player_updated_event, () => message.player_updated_event = Event.PlayerUpdatedEvent.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.player_left_event, () => message.player_left_event = Event.PlayerLeftEvent.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.toggle_updated_event, () => message.toggle_updated_event = Event.ToggleUpdatedEvent.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.artifact_added_event, () => message.artifact_added_event = Event.ArtifactAddedEvent.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.artifact_updated_event, () => message.artifact_updated_event = Event.ArtifactUpdatedEvent.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Event {
        return Event.deserialize(bytes);
    }
}
export namespace Event {
    export class PlayerAddedEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player?: dependency_1.Player;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_1.Player, 1) as dependency_1.Player;
        }
        set player(value: dependency_1.Player) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
        }): PlayerAddedEvent {
            const message = new PlayerAddedEvent({});
            if (data.player != null) {
                message.player = dependency_1.Player.fromObject(data.player);
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerAddedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerAddedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = dependency_1.Player.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerAddedEvent {
            return PlayerAddedEvent.deserialize(bytes);
        }
    }
    export class PlayerUpdatedEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player?: dependency_1.Player;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_1.Player, 1) as dependency_1.Player;
        }
        set player(value: dependency_1.Player) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
        }): PlayerUpdatedEvent {
            const message = new PlayerUpdatedEvent({});
            if (data.player != null) {
                message.player = dependency_1.Player.fromObject(data.player);
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerUpdatedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerUpdatedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = dependency_1.Player.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerUpdatedEvent {
            return PlayerUpdatedEvent.deserialize(bytes);
        }
    }
    export class PlayerLeftEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            player?: dependency_1.Player;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
            }
        }
        get player() {
            return pb_1.Message.getWrapperField(this, dependency_1.Player, 1) as dependency_1.Player;
        }
        set player(value: dependency_1.Player) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_player() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
        }): PlayerLeftEvent {
            const message = new PlayerLeftEvent({});
            if (data.player != null) {
                message.player = dependency_1.Player.fromObject(data.player);
            }
            return message;
        }
        toObject() {
            const data: {
                player?: ReturnType<typeof dependency_1.Player.prototype.toObject>;
            } = {};
            if (this.player != null) {
                data.player = this.player.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_player)
                writer.writeMessage(1, this.player, () => this.player.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerLeftEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerLeftEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.player, () => message.player = dependency_1.Player.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerLeftEvent {
            return PlayerLeftEvent.deserialize(bytes);
        }
    }
    export class ToggleUpdatedEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            toggle?: dependency_1.Toggle;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("toggle" in data && data.toggle != undefined) {
                    this.toggle = data.toggle;
                }
            }
        }
        get toggle() {
            return pb_1.Message.getWrapperField(this, dependency_1.Toggle, 1) as dependency_1.Toggle;
        }
        set toggle(value: dependency_1.Toggle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_toggle() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            toggle?: ReturnType<typeof dependency_1.Toggle.prototype.toObject>;
        }): ToggleUpdatedEvent {
            const message = new ToggleUpdatedEvent({});
            if (data.toggle != null) {
                message.toggle = dependency_1.Toggle.fromObject(data.toggle);
            }
            return message;
        }
        toObject() {
            const data: {
                toggle?: ReturnType<typeof dependency_1.Toggle.prototype.toObject>;
            } = {};
            if (this.toggle != null) {
                data.toggle = this.toggle.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_toggle)
                writer.writeMessage(1, this.toggle, () => this.toggle.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ToggleUpdatedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ToggleUpdatedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.toggle, () => message.toggle = dependency_1.Toggle.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ToggleUpdatedEvent {
            return ToggleUpdatedEvent.deserialize(bytes);
        }
    }
    export class ArtifactAddedEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            artifact?: dependency_1.Toggle;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("artifact" in data && data.artifact != undefined) {
                    this.artifact = data.artifact;
                }
            }
        }
        get artifact() {
            return pb_1.Message.getWrapperField(this, dependency_1.Toggle, 1) as dependency_1.Toggle;
        }
        set artifact(value: dependency_1.Toggle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_artifact() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            artifact?: ReturnType<typeof dependency_1.Toggle.prototype.toObject>;
        }): ArtifactAddedEvent {
            const message = new ArtifactAddedEvent({});
            if (data.artifact != null) {
                message.artifact = dependency_1.Toggle.fromObject(data.artifact);
            }
            return message;
        }
        toObject() {
            const data: {
                artifact?: ReturnType<typeof dependency_1.Toggle.prototype.toObject>;
            } = {};
            if (this.artifact != null) {
                data.artifact = this.artifact.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_artifact)
                writer.writeMessage(1, this.artifact, () => this.artifact.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactAddedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactAddedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.artifact, () => message.artifact = dependency_1.Toggle.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactAddedEvent {
            return ArtifactAddedEvent.deserialize(bytes);
        }
    }
    export class ArtifactUpdatedEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            artifact?: dependency_1.Toggle;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("artifact" in data && data.artifact != undefined) {
                    this.artifact = data.artifact;
                }
            }
        }
        get artifact() {
            return pb_1.Message.getWrapperField(this, dependency_1.Toggle, 1) as dependency_1.Toggle;
        }
        set artifact(value: dependency_1.Toggle) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_artifact() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            artifact?: ReturnType<typeof dependency_1.Toggle.prototype.toObject>;
        }): ArtifactUpdatedEvent {
            const message = new ArtifactUpdatedEvent({});
            if (data.artifact != null) {
                message.artifact = dependency_1.Toggle.fromObject(data.artifact);
            }
            return message;
        }
        toObject() {
            const data: {
                artifact?: ReturnType<typeof dependency_1.Toggle.prototype.toObject>;
            } = {};
            if (this.artifact != null) {
                data.artifact = this.artifact.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_artifact)
                writer.writeMessage(1, this.artifact, () => this.artifact.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactUpdatedEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactUpdatedEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.artifact, () => message.artifact = dependency_1.Toggle.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactUpdatedEvent {
            return ArtifactUpdatedEvent.deserialize(bytes);
        }
    }
}
export class Packet extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4, 5, 6, 7]];
    constructor(data?: any[] | ({
        id?: string;
        from?: string;
    } & (({
        command?: Command;
        connect?: never;
        response?: never;
        connect_response?: never;
        event?: never;
    } | {
        command?: never;
        connect?: Connect;
        response?: never;
        connect_response?: never;
        event?: never;
    } | {
        command?: never;
        connect?: never;
        response?: Response;
        connect_response?: never;
        event?: never;
    } | {
        command?: never;
        connect?: never;
        response?: never;
        connect_response?: ConnectResponse;
        event?: never;
    } | {
        command?: never;
        connect?: never;
        response?: never;
        connect_response?: never;
        event?: Event;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("from" in data && data.from != undefined) {
                this.from = data.from;
            }
            if ("command" in data && data.command != undefined) {
                this.command = data.command;
            }
            if ("connect" in data && data.connect != undefined) {
                this.connect = data.connect;
            }
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
            if ("connect_response" in data && data.connect_response != undefined) {
                this.connect_response = data.connect_response;
            }
            if ("event" in data && data.event != undefined) {
                this.event = data.event;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get from() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set from(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get command() {
        return pb_1.Message.getWrapperField(this, Command, 3) as Command;
    }
    set command(value: Command) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get has_command() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get connect() {
        return pb_1.Message.getWrapperField(this, Connect, 4) as Connect;
    }
    set connect(value: Connect) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_connect() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get response() {
        return pb_1.Message.getWrapperField(this, Response, 5) as Response;
    }
    set response(value: Response) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_response() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get connect_response() {
        return pb_1.Message.getWrapperField(this, ConnectResponse, 6) as ConnectResponse;
    }
    set connect_response(value: ConnectResponse) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_connect_response() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get event() {
        return pb_1.Message.getWrapperField(this, Event, 7) as Event;
    }
    set event(value: Event) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get has_event() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get packet() {
        const cases: {
            [index: number]: "none" | "command" | "connect" | "response" | "connect_response" | "event";
        } = {
            0: "none",
            3: "command",
            4: "connect",
            5: "response",
            6: "connect_response",
            7: "event"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6, 7])];
    }
    static fromObject(data: {
        id?: string;
        from?: string;
        command?: ReturnType<typeof Command.prototype.toObject>;
        connect?: ReturnType<typeof Connect.prototype.toObject>;
        response?: ReturnType<typeof Response.prototype.toObject>;
        connect_response?: ReturnType<typeof ConnectResponse.prototype.toObject>;
        event?: ReturnType<typeof Event.prototype.toObject>;
    }): Packet {
        const message = new Packet({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.from != null) {
            message.from = data.from;
        }
        if (data.command != null) {
            message.command = Command.fromObject(data.command);
        }
        if (data.connect != null) {
            message.connect = Connect.fromObject(data.connect);
        }
        if (data.response != null) {
            message.response = Response.fromObject(data.response);
        }
        if (data.connect_response != null) {
            message.connect_response = ConnectResponse.fromObject(data.connect_response);
        }
        if (data.event != null) {
            message.event = Event.fromObject(data.event);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            from?: string;
            command?: ReturnType<typeof Command.prototype.toObject>;
            connect?: ReturnType<typeof Connect.prototype.toObject>;
            response?: ReturnType<typeof Response.prototype.toObject>;
            connect_response?: ReturnType<typeof ConnectResponse.prototype.toObject>;
            event?: ReturnType<typeof Event.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.from != null) {
            data.from = this.from;
        }
        if (this.command != null) {
            data.command = this.command.toObject();
        }
        if (this.connect != null) {
            data.connect = this.connect.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        if (this.connect_response != null) {
            data.connect_response = this.connect_response.toObject();
        }
        if (this.event != null) {
            data.event = this.event.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.from.length)
            writer.writeString(2, this.from);
        if (this.has_command)
            writer.writeMessage(3, this.command, () => this.command.serialize(writer));
        if (this.has_connect)
            writer.writeMessage(4, this.connect, () => this.connect.serialize(writer));
        if (this.has_response)
            writer.writeMessage(5, this.response, () => this.response.serialize(writer));
        if (this.has_connect_response)
            writer.writeMessage(6, this.connect_response, () => this.connect_response.serialize(writer));
        if (this.has_event)
            writer.writeMessage(7, this.event, () => this.event.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Packet {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Packet();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.from = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.command, () => message.command = Command.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.connect, () => message.connect = Connect.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.response, () => message.response = Response.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.connect_response, () => message.connect_response = ConnectResponse.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.event, () => message.event = Event.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Packet {
        return Packet.deserialize(bytes);
    }
}