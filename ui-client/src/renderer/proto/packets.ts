/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.18.0
 * source: packets.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from './models';
import * as pb_1 from 'google-protobuf';
export class Command extends pb_1.Message {
    constructor(
        data?:
            | any[]
            | {
                  command_type?: Command.CommandTypes;
              }
    ) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == 'object') {
            if ('command_type' in data && data.command_type != undefined) {
                this.command_type = data.command_type;
            }
        }
    }
    get command_type() {
        return pb_1.Message.getField(this, 1) as Command.CommandTypes;
    }
    set command_type(value: Command.CommandTypes) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { command_type?: Command.CommandTypes }) {
        const message = new Command({});
        if (data.command_type != null) {
            message.command_type = data.command_type;
        }
        return message;
    }
    toObject() {
        const data: {
            command_type?: Command.CommandTypes;
        } = {};
        if (this.command_type != null) {
            data.command_type = this.command_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.command_type !== undefined) writer.writeEnum(1, this.command_type);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
            message = new Command();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.command_type = reader.readEnum();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Command {
        return Command.deserialize(bytes);
    }
}
export namespace Command {
    export enum CommandTypes {
        ReturnToMenu = 0,
    }
}
export class Connect extends pb_1.Message {
    constructor(
        data?:
            | any[]
            | {
                  password?: string;
              }
    ) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == 'object') {
            if ('password' in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get password() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: { password?: string }) {
        const message = new Connect({});
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            password?: string;
        } = {};
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.password === 'string' && this.password.length) writer.writeString(1, this.password);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Connect {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
            message = new Connect();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.password = reader.readString();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Connect {
        return Connect.deserialize(bytes);
    }
}
export class Response extends pb_1.Message {
    constructor(
        data?:
            | any[]
            | {
                  type?: Response.ResponseType;
                  message?: string;
              }
    ) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == 'object') {
            if ('type' in data && data.type != undefined) {
                this.type = data.type;
            }
            if ('message' in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get type() {
        return pb_1.Message.getField(this, 1) as Response.ResponseType;
    }
    set type(value: Response.ResponseType) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { type?: Response.ResponseType; message?: string }) {
        const message = new Response({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: Response.ResponseType;
            message?: string;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type !== undefined) writer.writeEnum(1, this.type);
        if (typeof this.message === 'string' && this.message.length) writer.writeString(2, this.message);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
            message = new Response();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Response {
        return Response.deserialize(bytes);
    }
}
export namespace Response {
    export enum ResponseType {
        Fail = 0,
        Success = 1,
    }
}
export class ConnectResponse extends pb_1.Message {
    constructor(
        data?:
            | any[]
            | {
                  response?: Response;
                  self?: dependency_1.proto.models.User;
              }
    ) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == 'object') {
            if ('response' in data && data.response != undefined) {
                this.response = data.response;
            }
            if ('self' in data && data.self != undefined) {
                this.self = data.self;
            }
        }
    }
    get response() {
        return pb_1.Message.getWrapperField(this, Response, 1) as Response;
    }
    set response(value: Response) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get self() {
        return pb_1.Message.getWrapperField(this, dependency_1.proto.models.User, 2) as dependency_1.proto.models.User;
    }
    set self(value: dependency_1.proto.models.User) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    static fromObject(data: {
        response?: ReturnType<typeof Response.prototype.toObject>;
        self?: ReturnType<typeof dependency_1.proto.models.User.prototype.toObject>;
    }) {
        const message = new ConnectResponse({});
        if (data.response != null) {
            message.response = Response.fromObject(data.response);
        }
        if (data.self != null) {
            message.self = dependency_1.proto.models.User.fromObject(data.self);
        }
        return message;
    }
    toObject() {
        const data: {
            response?: ReturnType<typeof Response.prototype.toObject>;
            self?: ReturnType<typeof dependency_1.proto.models.User.prototype.toObject>;
        } = {};
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        if (this.self != null) {
            data.self = this.self.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.response !== undefined) writer.writeMessage(1, this.response, () => this.response.serialize(writer));
        if (this.self !== undefined) writer.writeMessage(2, this.self, () => this.self.serialize(writer));
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConnectResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
            message = new ConnectResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.response, () => (message.response = Response.deserialize(reader)));
                    break;
                case 2:
                    reader.readMessage(
                        message.self,
                        () => (message.self = dependency_1.proto.models.User.deserialize(reader))
                    );
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ConnectResponse {
        return ConnectResponse.deserialize(bytes);
    }
}
export class Packet extends pb_1.Message {
    constructor(
        data?:
            | any[]
            | ({
                  id?: string;
                  from?: string;
              } & (
                  | {
                        command?: Command;
                        connect?: never;
                        response?: never;
                        connect_response?: never;
                    }
                  | {
                        command?: never;
                        connect?: Connect;
                        response?: never;
                        connect_response?: never;
                    }
                  | {
                        command?: never;
                        connect?: never;
                        response?: Response;
                        connect_response?: never;
                    }
                  | {
                        command?: never;
                        connect?: never;
                        response?: never;
                        connect_response?: ConnectResponse;
                    }
              ))
    ) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[3, 4, 5, 6]]);
        if (!Array.isArray(data) && typeof data == 'object') {
            if ('id' in data && data.id != undefined) {
                this.id = data.id;
            }
            if ('from' in data && data.from != undefined) {
                this.from = data.from;
            }
            if ('command' in data && data.command != undefined) {
                this.command = data.command;
            }
            if ('connect' in data && data.connect != undefined) {
                this.connect = data.connect;
            }
            if ('response' in data && data.response != undefined) {
                this.response = data.response;
            }
            if ('connect_response' in data && data.connect_response != undefined) {
                this.connect_response = data.connect_response;
            }
        }
    }
    get id() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get from() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set from(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get command() {
        return pb_1.Message.getWrapperField(this, Command, 3) as Command;
    }
    set command(value: Command) {
        pb_1.Message.setOneofWrapperField(this, 3, [3, 4, 5, 6], value);
    }
    get connect() {
        return pb_1.Message.getWrapperField(this, Connect, 4) as Connect;
    }
    set connect(value: Connect) {
        pb_1.Message.setOneofWrapperField(this, 4, [3, 4, 5, 6], value);
    }
    get response() {
        return pb_1.Message.getWrapperField(this, Response, 5) as Response;
    }
    set response(value: Response) {
        pb_1.Message.setOneofWrapperField(this, 5, [3, 4, 5, 6], value);
    }
    get connect_response() {
        return pb_1.Message.getWrapperField(this, ConnectResponse, 6) as ConnectResponse;
    }
    set connect_response(value: ConnectResponse) {
        pb_1.Message.setOneofWrapperField(this, 6, [3, 4, 5, 6], value);
    }
    get packet() {
        const cases: {
            [index: number]: 'none' | 'command' | 'connect' | 'response' | 'connect_response';
        } = {
            0: 'none',
            3: 'command',
            4: 'connect',
            5: 'response',
            6: 'connect_response',
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4, 5, 6])];
    }
    static fromObject(data: {
        id?: string;
        from?: string;
        command?: ReturnType<typeof Command.prototype.toObject>;
        connect?: ReturnType<typeof Connect.prototype.toObject>;
        response?: ReturnType<typeof Response.prototype.toObject>;
        connect_response?: ReturnType<typeof ConnectResponse.prototype.toObject>;
    }) {
        const message = new Packet({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.from != null) {
            message.from = data.from;
        }
        if (data.command != null) {
            message.command = Command.fromObject(data.command);
        }
        if (data.connect != null) {
            message.connect = Connect.fromObject(data.connect);
        }
        if (data.response != null) {
            message.response = Response.fromObject(data.response);
        }
        if (data.connect_response != null) {
            message.connect_response = ConnectResponse.fromObject(data.connect_response);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            from?: string;
            command?: ReturnType<typeof Command.prototype.toObject>;
            connect?: ReturnType<typeof Connect.prototype.toObject>;
            response?: ReturnType<typeof Response.prototype.toObject>;
            connect_response?: ReturnType<typeof ConnectResponse.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.from != null) {
            data.from = this.from;
        }
        if (this.command != null) {
            data.command = this.command.toObject();
        }
        if (this.connect != null) {
            data.connect = this.connect.toObject();
        }
        if (this.response != null) {
            data.response = this.response.toObject();
        }
        if (this.connect_response != null) {
            data.connect_response = this.connect_response.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.id === 'string' && this.id.length) writer.writeString(1, this.id);
        if (typeof this.from === 'string' && this.from.length) writer.writeString(2, this.from);
        if (this.command !== undefined) writer.writeMessage(3, this.command, () => this.command.serialize(writer));
        if (this.connect !== undefined) writer.writeMessage(4, this.connect, () => this.connect.serialize(writer));
        if (this.response !== undefined) writer.writeMessage(5, this.response, () => this.response.serialize(writer));
        if (this.connect_response !== undefined)
            writer.writeMessage(6, this.connect_response, () => this.connect_response.serialize(writer));
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Packet {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),
            message = new Packet();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.from = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.command, () => (message.command = Command.deserialize(reader)));
                    break;
                case 4:
                    reader.readMessage(message.connect, () => (message.connect = Connect.deserialize(reader)));
                    break;
                case 5:
                    reader.readMessage(message.response, () => (message.response = Response.deserialize(reader)));
                    break;
                case 6:
                    reader.readMessage(
                        message.connect_response,
                        () => (message.connect_response = ConnectResponse.deserialize(reader))
                    );
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Packet {
        return Packet.deserialize(bytes);
    }
}
